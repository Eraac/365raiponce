<?php

namespace CoreBundle\Repository;

use Doctrine\ORM\QueryBuilder;

/**
 * RemarkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RemarkRepository extends AbstractDateRepository
{
    /**
     * @return QueryBuilder
     */
    public function qbFindAllPublished() : QueryBuilder
    {
        return $this
            ->createQueryBuilder('r')
            ->where('r.postedAt IS NOT NULL');
    }

    /**
     * @return QueryBuilder
     */
    public function qbFindAllUnpublished() : QueryBuilder
    {
        return $this
            ->createQueryBuilder('r')
            ->where('r.postedAt IS NULL');
    }

    /**
     * @param QueryBuilder $qb
     * @param int|string   $timestamp
     *
     * @return QueryBuilder
     */
    public function filterByPostedBefore(QueryBuilder $qb, $timestamp) : QueryBuilder
    {
        $qb
            ->andWhere('r.postedAt < :posted_before')
            ->setParameter('posted_before', $this->dateFromTimestamp($timestamp))
        ;

        return $qb;
    }

    /**
     * @param QueryBuilder $qb
     * @param int|string   $timestamp
     *
     * @return QueryBuilder
     */
    public function filterByPostedAfter(QueryBuilder $qb, $timestamp) : QueryBuilder
    {
        $qb
            ->andWhere('r.postedAt > :posted_after')
            ->setParameter('posted_after', $this->dateFromTimestamp($timestamp))
        ;

        return $qb;
    }

    /**
     * @param QueryBuilder $qb
     * @param int|array    $emotion
     *
     * @return QueryBuilder
     */
    public function filterByEmotion(QueryBuilder $qb, $emotion) : QueryBuilder
    {
        return $this->filterByWithJoin($qb, 'emotion', $emotion, 'e');
    }

    /**
     * @param QueryBuilder $qb
     * @param int|array    $theme
     *
     * @return QueryBuilder
     */
    public function filterByTheme(QueryBuilder $qb, $theme) : QueryBuilder
    {
        return $this->filterByWithJoin($qb, 'theme', $theme, 't');
    }

    /**
     * @param QueryBuilder $qb
     * @param string       $orderBy
     * @param string       $order
     *
     * @return QueryBuilder
     */
    public function orderByPostedAt(QueryBuilder $qb, string $orderBy, string $order) : QueryBuilder
    {
        return $this->applyOrder($qb, 'postedAt', $order);
    }

    /**
     * @param QueryBuilder $qb
     * @param string       $orderBy
     * @param string       $order
     *
     * @return QueryBuilder
     */
    public function orderByScaleEmotion(QueryBuilder $qb, string $orderBy, string $order) : QueryBuilder
    {
        return $this->applyOrder($qb, 'scaleEmotion', $order);
    }

    /**
     * @param QueryBuilder $qb
     * @param string       $orderBy
     * @param string       $order
     *
     * @return QueryBuilder
     */
    public function orderByEmotion(QueryBuilder $qb, string $orderBy, string $order) : QueryBuilder
    {
        $alias = 'e';

        $this->safeLeftJoin($qb, 'emotion', $alias);

        return $this->applyOrder($qb, 'name', $order, $alias);
    }

    /**
     * @param QueryBuilder $qb
     * @param string       $orderBy
     * @param string       $order
     *
     * @return QueryBuilder
     */
    public function orderByTheme(QueryBuilder $qb, string $orderBy, string $order) : QueryBuilder
    {
        $alias = 't';

        $this->safeLeftJoin($qb, 'theme', $alias);

        return $this->applyOrder($qb, 'name', $order, $alias);
    }

    /**
     * @param \DateTime $from
     * @param \DateTime $to
     *
     * @return int
     */
    public function countPublished(\DateTime $from, \DateTime $to) : int
    {
        $qb = $this->count('r');

        $qb
            ->where($qb->expr()->isNotNull('r.postedAt'))
            ->andWhere('r.postedAt > :from', 'r.postedAt < :to')
            ->setParameters([
                'from' => $from,
                'to' => $to
            ])
        ;

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param \DateTime $from
     * @param \DateTime $to
     *
     * @return int
     */
    public function countUnpublished(\DateTime $from, \DateTime $to) : int
    {
        $qb = $this->count('r');

        $qb = $this
            ->filterByPeriod($qb, $from, $to)
            ->andWhere($qb->expr()->isNull('r.postedAt'))
        ;

        return $qb->getQuery()->getSingleScalarResult();
    }
}
