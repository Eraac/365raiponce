<?php

namespace CoreBundle\Repository;

use CoreBundle\Entity\Remark;
use Doctrine\ORM\QueryBuilder;

/**
 * ResponseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResponseRepository extends AbstractDateRepository
{
    /**
     * @return QueryBuilder
     */
    public function qbFindAllPublished() : QueryBuilder
    {
        return $this
            ->createQueryBuilder('r')
            ->where('r.postedAt IS NOT NULL');
    }

    /**
     * @param Remark $remark
     *
     * @return QueryBuilder
     */
    public function qbFindAllPublishedInRemark(Remark $remark) : QueryBuilder
    {
        return $this->qbFindAllPublished()
            ->where('r.remark = :remark')
            ->setParameter('remark', $remark);
    }

    /**
     * @return QueryBuilder
     */
    public function qbFindAllUnpublished() : QueryBuilder
    {
        return $this
            ->createQueryBuilder('r')
            ->where('r.postedAt IS NULL');
    }

    /**
     * @param QueryBuilder $qb
     * @param int|string   $timestamp
     *
     * @return QueryBuilder
     */
    public function filterByPostedBefore(QueryBuilder $qb, $timestamp) : QueryBuilder
    {
        $qb
            ->andWhere('r.postedAt < :posted_before')
            ->setParameter('posted_before', $this->dateFromTimestamp($timestamp))
        ;

        return $qb;
    }

    /**
     * @param QueryBuilder $qb
     * @param int|string   $timestamp
     *
     * @return QueryBuilder
     */
    public function filterByPostedAfter(QueryBuilder $qb, $timestamp) : QueryBuilder
    {
        $qb
            ->andWhere('r.postedAt > :posted_after')
            ->setParameter('posted_after', $this->dateFromTimestamp($timestamp))
        ;

        return $qb;
    }

    /**
     * @param QueryBuilder $qb
     * @param              $remark
     *
     * @return QueryBuilder
     */
    public function filterByRemark(QueryBuilder $qb, $remark) : QueryBuilder
    {
        return $this->filterByWithJoin($qb, 'remark', $remark, 're');
    }

    /**
     * @param QueryBuilder $qb
     * @param string       $orderBy
     * @param string       $order
     *
     * @return QueryBuilder
     */
    public function orderByPostedAt(QueryBuilder $qb, string $orderBy, string $order) : QueryBuilder
    {
        return $this->applyOrder($qb, 'postedAt', $order);
    }

    /**
     * @param QueryBuilder $qb
     * @param string       $orderBy
     * @param string       $order
     *
     * @return QueryBuilder
     */
    public function orderByRemark(QueryBuilder $qb, string $orderBy, string $order) : QueryBuilder
    {
        $alias = 're';

        $this->safeLeftJoin($qb, 'remark', $alias);

        return $this->applyOrder($qb, 'id', $order, $alias);
    }
}
